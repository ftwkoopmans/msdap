% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_peptides.R
\name{dataset_filter_custom}
\alias{dataset_filter_custom}
\title{Custom dataset filtering rules that also enable one-sided filtering}
\usage{
dataset_filter_custom(
  peptides,
  samples,
  col_intensity,
  peptide_min_detect,
  peptide_frac_detect,
  protein_min_peptides,
  groups_min_pass
)
}
\arguments{
\item{peptides}{typically \code{dataset$peptides}}

\item{samples}{typically \code{dataset$samples} , but with mutations to the \code{group} and \code{exclude} columns}

\item{col_intensity}{designated intensity column in \code{dataset$peptides} table that will contain the output/results. Naming convention is very strict, must start with "intensity_" and be followed only by lowercase letters, numbers or underscores}

\item{peptide_min_detect}{minimum number of samples, per group (in samples table), where a peptide must be detected to count as 'valid' (per group). Value > 0}

\item{peptide_frac_detect}{minimum fraction of samples, per group (in samples table), where a peptide must be detected to count as 'valid' (per group). Value between 0 and 1}

\item{protein_min_peptides}{minimum number of 'valid' peptides, per group (in samples table), that a protein must have to count as 'valid' (per group). Value > 0}

\item{groups_min_pass}{minimum number of groups in which a protein must be 'valid' in order to be retained in the results. Value > 0}
}
\value{
\code{peptides} input table with results stored in column \code{col_intensity}
}
\description{
Apply filtering rules to the peptide table and store results in a new intensity column. Normalization must be applied separately, see example below.

You can tweak columns "group" and "exclude" in the samples table to define desired groups and
exclude either outlier samples, or entire conditions, as desired.
}
\examples{
\dontrun{
dataset$peptides = dataset_filter_custom(
  dataset$peptides,
  dataset$samples \%>\% mutate(group = tissue_type),
  col_intensity = "intensity_all_group",
  peptide_min_detect = 5,
  peptide_frac_detect = 0.75,
  protein_min_peptides = 2,
  groups_min_pass = 1  # one-sided group filtering
)

dataset = normalize_peptide_intensity_column(
  dataset,
  col_intensity = "intensity_all_group",  # same column name as above !
  norm_algorithm = c("mwmb", "modebetween_protein"),
  rollup_algorithm = "maxlfq"
)
}
}
